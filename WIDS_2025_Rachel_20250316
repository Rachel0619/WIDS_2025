{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":90566,"databundleVersionId":10712530,"sourceType":"competition"}],"dockerImageVersionId":30839,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:46:45.846817Z","iopub.execute_input":"2025-03-16T22:46:45.847090Z","iopub.status.idle":"2025-03-16T22:46:45.855553Z","shell.execute_reply.started":"2025-03-16T22:46:45.847070Z","shell.execute_reply":"2025-03-16T22:46:45.854900Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.metrics import f1_score, classification_report\nfrom sklearn.model_selection import StratifiedKFold, cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom xgboost import XGBRegressor, XGBClassifier\nimport xgboost\nfrom sklearn.model_selection import KFold","metadata":{"execution":{"iopub.status.busy":"2025-03-16T22:46:45.861657Z","iopub.execute_input":"2025-03-16T22:46:45.861856Z","iopub.status.idle":"2025-03-16T22:46:45.865560Z","shell.execute_reply.started":"2025-03-16T22:46:45.861839Z","shell.execute_reply":"2025-03-16T22:46:45.864826Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## EDA","metadata":{}},{"cell_type":"markdown","source":"### Data Dictionary","metadata":{}},{"cell_type":"code","source":"dict = pd.read_excel(\"/kaggle/input/widsdatathon2025/Data Dictionary.xlsx\")","metadata":{"execution":{"iopub.status.busy":"2025-03-16T22:46:45.874119Z","iopub.execute_input":"2025-03-16T22:46:45.874313Z","iopub.status.idle":"2025-03-16T22:46:45.893335Z","shell.execute_reply.started":"2025-03-16T22:46:45.874296Z","shell.execute_reply":"2025-03-16T22:46:45.892779Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"dict","metadata":{"execution":{"iopub.status.busy":"2025-03-16T22:46:45.905588Z","iopub.execute_input":"2025-03-16T22:46:45.905787Z","iopub.status.idle":"2025-03-16T22:46:45.917159Z","shell.execute_reply.started":"2025-03-16T22:46:45.905770Z","shell.execute_reply":"2025-03-16T22:46:45.916313Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Categorical Features","metadata":{}},{"cell_type":"code","source":"train_cat = pd.read_excel(\"/kaggle/input/widsdatathon2025/TRAIN/TRAIN_CATEGORICAL_METADATA.xlsx\")\ntest_cat = pd.read_excel(\"/kaggle/input/widsdatathon2025/TEST/TEST_CATEGORICAL.xlsx\")","metadata":{"execution":{"iopub.status.busy":"2025-03-16T22:46:45.918032Z","iopub.execute_input":"2025-03-16T22:46:45.918277Z","iopub.status.idle":"2025-03-16T22:46:46.105870Z","shell.execute_reply.started":"2025-03-16T22:46:45.918252Z","shell.execute_reply":"2025-03-16T22:46:46.105063Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(train_cat.shape)\nprint(test_cat.shape)","metadata":{"execution":{"iopub.status.busy":"2025-03-16T22:46:46.107104Z","iopub.execute_input":"2025-03-16T22:46:46.107360Z","iopub.status.idle":"2025-03-16T22:46:46.111080Z","shell.execute_reply.started":"2025-03-16T22:46:46.107340Z","shell.execute_reply":"2025-03-16T22:46:46.110430Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_cat.head()","metadata":{"execution":{"iopub.status.busy":"2025-03-16T22:46:46.112271Z","iopub.execute_input":"2025-03-16T22:46:46.112566Z","iopub.status.idle":"2025-03-16T22:46:46.121024Z","shell.execute_reply.started":"2025-03-16T22:46:46.112537Z","shell.execute_reply":"2025-03-16T22:46:46.120419Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"cat_columns = train_cat.columns\ncat_columns","metadata":{"execution":{"iopub.status.busy":"2025-03-16T22:46:46.121716Z","iopub.execute_input":"2025-03-16T22:46:46.121896Z","iopub.status.idle":"2025-03-16T22:46:46.126179Z","shell.execute_reply.started":"2025-03-16T22:46:46.121881Z","shell.execute_reply":"2025-03-16T22:46:46.125562Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_cat.info()","metadata":{"execution":{"iopub.status.busy":"2025-03-16T22:46:46.126850Z","iopub.execute_input":"2025-03-16T22:46:46.127039Z","iopub.status.idle":"2025-03-16T22:46:46.135198Z","shell.execute_reply.started":"2025-03-16T22:46:46.127022Z","shell.execute_reply":"2025-03-16T22:46:46.134521Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_cat.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2025-03-16T22:46:46.137100Z","iopub.execute_input":"2025-03-16T22:46:46.137287Z","iopub.status.idle":"2025-03-16T22:46:46.142256Z","shell.execute_reply.started":"2025-03-16T22:46:46.137271Z","shell.execute_reply":"2025-03-16T22:46:46.141637Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test_cat.isna().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:46:46.143006Z","iopub.execute_input":"2025-03-16T22:46:46.143200Z","iopub.status.idle":"2025-03-16T22:46:46.148311Z","shell.execute_reply.started":"2025-03-16T22:46:46.143183Z","shell.execute_reply":"2025-03-16T22:46:46.147461Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Quantitative Features","metadata":{}},{"cell_type":"code","source":"train_quant = pd.read_excel(\"/kaggle/input/widsdatathon2025/TRAIN/TRAIN_QUANTITATIVE_METADATA.xlsx\")\ntest_quant = pd.read_excel(\"/kaggle/input/widsdatathon2025/TEST/TEST_QUANTITATIVE_METADATA.xlsx\")","metadata":{"execution":{"iopub.status.busy":"2025-03-16T22:46:46.149243Z","iopub.execute_input":"2025-03-16T22:46:46.149479Z","iopub.status.idle":"2025-03-16T22:46:46.450160Z","shell.execute_reply.started":"2025-03-16T22:46:46.149460Z","shell.execute_reply":"2025-03-16T22:46:46.449574Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(train_quant.shape)\nprint(test_quant.shape)","metadata":{"execution":{"iopub.status.busy":"2025-03-16T22:46:46.450728Z","iopub.execute_input":"2025-03-16T22:46:46.450910Z","iopub.status.idle":"2025-03-16T22:46:46.454875Z","shell.execute_reply.started":"2025-03-16T22:46:46.450893Z","shell.execute_reply":"2025-03-16T22:46:46.453913Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_quant.head()","metadata":{"execution":{"iopub.status.busy":"2025-03-16T22:46:46.455683Z","iopub.execute_input":"2025-03-16T22:46:46.455959Z","iopub.status.idle":"2025-03-16T22:46:46.467526Z","shell.execute_reply.started":"2025-03-16T22:46:46.455938Z","shell.execute_reply":"2025-03-16T22:46:46.466347Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_quant.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2025-03-16T22:46:46.469030Z","iopub.execute_input":"2025-03-16T22:46:46.469221Z","iopub.status.idle":"2025-03-16T22:46:46.474279Z","shell.execute_reply.started":"2025-03-16T22:46:46.469204Z","shell.execute_reply":"2025-03-16T22:46:46.473708Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test_quant.isna().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:46:46.475646Z","iopub.execute_input":"2025-03-16T22:46:46.475870Z","iopub.status.idle":"2025-03-16T22:46:46.480880Z","shell.execute_reply.started":"2025-03-16T22:46:46.475851Z","shell.execute_reply":"2025-03-16T22:46:46.480132Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_quant.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:46:46.481632Z","iopub.execute_input":"2025-03-16T22:46:46.481820Z","iopub.status.idle":"2025-03-16T22:46:46.489621Z","shell.execute_reply.started":"2025-03-16T22:46:46.481803Z","shell.execute_reply":"2025-03-16T22:46:46.488795Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Targets","metadata":{}},{"cell_type":"markdown","source":"0= Other/None, 1=ADHD\n\n0=Male   \n1=Female\n","metadata":{}},{"cell_type":"code","source":"targets = pd.read_excel(\"/kaggle/input/widsdatathon2025/TRAIN/TRAINING_SOLUTIONS.xlsx\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:46:46.490348Z","iopub.execute_input":"2025-03-16T22:46:46.490566Z","iopub.status.idle":"2025-03-16T22:46:46.558267Z","shell.execute_reply.started":"2025-03-16T22:46:46.490549Z","shell.execute_reply":"2025-03-16T22:46:46.557655Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"targets.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:46:46.559041Z","iopub.execute_input":"2025-03-16T22:46:46.559266Z","iopub.status.idle":"2025-03-16T22:46:46.565812Z","shell.execute_reply.started":"2025-03-16T22:46:46.559248Z","shell.execute_reply":"2025-03-16T22:46:46.565152Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"targets['ADHD_Outcome'].value_counts().plot(kind='bar', color='blue')\nplt.title('ADHD Outcome')\nplt.ylabel(\"Count\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:46:46.566480Z","iopub.execute_input":"2025-03-16T22:46:46.566705Z","iopub.status.idle":"2025-03-16T22:46:46.822963Z","shell.execute_reply.started":"2025-03-16T22:46:46.566687Z","shell.execute_reply":"2025-03-16T22:46:46.822050Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"targets['Sex_F'].value_counts().plot(kind='bar', color='blue')\nplt.title('Sex')\nplt.ylabel(\"Count\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:46:46.823911Z","iopub.execute_input":"2025-03-16T22:46:46.824150Z","iopub.status.idle":"2025-03-16T22:46:46.993905Z","shell.execute_reply.started":"2025-03-16T22:46:46.824128Z","shell.execute_reply":"2025-03-16T22:46:46.992890Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Preprocessing","metadata":{}},{"cell_type":"markdown","source":"### Categorical variables","metadata":{}},{"cell_type":"markdown","source":"#### Impute missing values","metadata":{}},{"cell_type":"code","source":"imputer = SimpleImputer(strategy=\"most_frequent\")\nimputer.fit(train_cat) \n\ntrain_cat_imputed = pd.DataFrame(imputer.transform(train_cat), columns=cat_columns)\ntest_cat_imputed = pd.DataFrame(imputer.transform(test_cat), columns=cat_columns)\n\nfor name, df in {\"train\": train_cat_imputed, \"test\": test_cat_imputed}.items():\n    if df.isna().sum().sum() == 0:\n        print(f\"Missing values imputed for {name} categorical features\")\n    else:\n        print(f\"Some missing values still remain in {name} categorical features\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:46:46.994760Z","iopub.execute_input":"2025-03-16T22:46:46.994992Z","iopub.status.idle":"2025-03-16T22:46:47.009324Z","shell.execute_reply.started":"2025-03-16T22:46:46.994971Z","shell.execute_reply":"2025-03-16T22:46:47.008664Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"#### One hot encoding","metadata":{}},{"cell_type":"code","source":"for col in train_cat_imputed.select_dtypes(include=[\"int\", \"float\"]).columns:\n    train_cat_imputed[col] = train_cat_imputed[col].astype('category')\n    test_cat_imputed[col] = test_cat_imputed[col].astype('category')\n    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:46:47.012232Z","iopub.execute_input":"2025-03-16T22:46:47.012440Z","iopub.status.idle":"2025-03-16T22:46:47.015906Z","shell.execute_reply.started":"2025-03-16T22:46:47.012421Z","shell.execute_reply":"2025-03-16T22:46:47.015136Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"columns_to_encode = train_cat_imputed.columns[1:].tolist()\ncolumns_to_encode","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:46:47.017399Z","iopub.execute_input":"2025-03-16T22:46:47.017768Z","iopub.status.idle":"2025-03-16T22:46:47.022176Z","shell.execute_reply.started":"2025-03-16T22:46:47.017747Z","shell.execute_reply":"2025-03-16T22:46:47.021519Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"encoder = OneHotEncoder(handle_unknown=\"ignore\")\nencoder.fit(train_cat_imputed[columns_to_encode])\ntrain_cat_encoded = encoder.transform(train_cat_imputed[columns_to_encode])\ntest_cat_encoded = encoder.transform(test_cat_imputed[columns_to_encode])\n\ntrain_cat_encoded = train_cat_encoded.toarray()\ntest_cat_encoded = test_cat_encoded.toarray()\n\n# Get feature names from the encoder\nencoded_feature_names = encoder.get_feature_names_out(columns_to_encode)\n\n# Convert to DataFrame\ntrain_cat_encoded = pd.DataFrame(train_cat_encoded, columns=encoded_feature_names)\ntest_cat_encoded = pd.DataFrame(test_cat_encoded, columns=encoded_feature_names)\n\nif train_cat_encoded.shape[1] == test_cat_encoded.shape[1]:\n    print(\"train and test categorical features are aligned\")\nelse:\n    print(\"Check required!\")\n\ntrain_cat_encoded.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:46:47.022944Z","iopub.execute_input":"2025-03-16T22:46:47.023146Z","iopub.status.idle":"2025-03-16T22:46:47.058044Z","shell.execute_reply.started":"2025-03-16T22:46:47.023128Z","shell.execute_reply":"2025-03-16T22:46:47.057405Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"#### Combine encoded columns with the index","metadata":{}},{"cell_type":"code","source":"train_cat_final = pd.concat([train_cat.drop(columns=columns_to_encode), train_cat_encoded], axis=1)\ntest_cat_final = pd.concat([test_cat.drop(columns=columns_to_encode), test_cat_encoded], axis=1)\ntrain_cat_final.head()\ntest_cat_final.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:46:47.058773Z","iopub.execute_input":"2025-03-16T22:46:47.058989Z","iopub.status.idle":"2025-03-16T22:46:47.081478Z","shell.execute_reply.started":"2025-03-16T22:46:47.058971Z","shell.execute_reply":"2025-03-16T22:46:47.080623Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Numerical Variables","metadata":{}},{"cell_type":"markdown","source":"#### Impute missing values","metadata":{}},{"cell_type":"code","source":"quant_features = train_quant.columns.drop(\"participant_id\")\nimputer = SimpleImputer(strategy=\"median\")\n\n# Do not fit on test data to prevent data leakage\nimputer.fit(train_quant[quant_features])\n\ntrain_quant_imputed = pd.DataFrame(imputer.transform(train_quant[quant_features]), columns=quant_features)\ntest_quant_imputed = pd.DataFrame(imputer.transform(test_quant[quant_features]), columns=quant_features)\n\nfor name, df in {\"train\": train_quant_imputed, \"test\": test_quant_imputed}.items():\n    if df.isna().sum().sum() == 0:\n        print(f\"Missing values imputed for {name} numerical features\")\n    else:\n        print(f\"Some missing values still remain in {name} numerical features\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:46:47.082302Z","iopub.execute_input":"2025-03-16T22:46:47.082578Z","iopub.status.idle":"2025-03-16T22:46:47.096040Z","shell.execute_reply.started":"2025-03-16T22:46:47.082558Z","shell.execute_reply":"2025-03-16T22:46:47.095237Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"#### Standardize","metadata":{}},{"cell_type":"code","source":"scaler = StandardScaler()\nscaler.fit(train_quant_imputed)\n\ntrain_quant_scaled = pd.DataFrame(scaler.transform(train_quant_imputed[quant_features]), columns=quant_features)\ntest_quant_scaled = pd.DataFrame(scaler.transform(test_quant_imputed[quant_features]), columns=quant_features)\n\ntrain_quant_final = pd.concat([train_quant.drop(columns=quant_features), train_quant_scaled], axis=1)\ntest_quant_final = pd.concat([test_quant.drop(columns=quant_features), test_quant_scaled], axis=1)\n\n\nif train_quant_final.shape[1] == test_quant_final.shape[1]:\n    print(\"train and test quantitative features are aligned\")\nelse:\n    print(\"Check required!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:46:47.096772Z","iopub.execute_input":"2025-03-16T22:46:47.097021Z","iopub.status.idle":"2025-03-16T22:46:47.108812Z","shell.execute_reply.started":"2025-03-16T22:46:47.097001Z","shell.execute_reply":"2025-03-16T22:46:47.107897Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### MRI Data","metadata":{}},{"cell_type":"code","source":"train_fmri = pd.read_csv(\"/kaggle/input/widsdatathon2025/TRAIN/TRAIN_FUNCTIONAL_CONNECTOME_MATRICES.csv\")\ntest_fmri = pd.read_csv(\"/kaggle/input/widsdatathon2025/TEST/TEST_FUNCTIONAL_CONNECTOME_MATRICES.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:46:47.109763Z","iopub.execute_input":"2025-03-16T22:46:47.110088Z","iopub.status.idle":"2025-03-16T22:46:59.469668Z","shell.execute_reply.started":"2025-03-16T22:46:47.110060Z","shell.execute_reply":"2025-03-16T22:46:59.468927Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(train_fmri.shape)\nprint(test_fmri.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:46:59.470390Z","iopub.execute_input":"2025-03-16T22:46:59.470627Z","iopub.status.idle":"2025-03-16T22:46:59.474735Z","shell.execute_reply.started":"2025-03-16T22:46:59.470606Z","shell.execute_reply":"2025-03-16T22:46:59.473994Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Standardise before applying PCA\nfmri_features = train_fmri.columns.drop(\"participant_id\")\nscaler = StandardScaler().fit(train_fmri.drop(columns=\"participant_id\"))\n\ntrain_fmri_scaled = pd.DataFrame(scaler.transform(train_fmri.drop(columns=\"participant_id\")), columns=fmri_features)\ntest_fmri_scaled = pd.DataFrame(scaler.transform(test_fmri.drop(columns=\"participant_id\")), columns=fmri_features)\n\npca = PCA(n_components=0.95).fit(train_fmri_scaled)\n\ntrain_fmri_pca = pca.transform(train_fmri_scaled)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:46:59.475453Z","iopub.execute_input":"2025-03-16T22:46:59.475744Z","iopub.status.idle":"2025-03-16T22:47:15.026548Z","shell.execute_reply.started":"2025-03-16T22:46:59.475723Z","shell.execute_reply":"2025-03-16T22:47:15.025595Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# The maximum number of principal components you can have is min(n_samples, n_features)\n# That's why the shape is (1213, 1213) if we don't specify any value for n_components\ntrain_fmri_pca = pd.DataFrame(train_fmri_pca, columns=[f\"PC{i}\" for i in range(1, train_fmri_pca.shape[1] + 1)])\ntrain_fmri_pca.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:47:15.027441Z","iopub.execute_input":"2025-03-16T22:47:15.027728Z","iopub.status.idle":"2025-03-16T22:47:15.033334Z","shell.execute_reply.started":"2025-03-16T22:47:15.027705Z","shell.execute_reply":"2025-03-16T22:47:15.032392Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Apply PCA to test data as well\ntest_fmri_pca = pca.transform(test_fmri_scaled)\ntest_fmri_pca = pd.DataFrame(test_fmri_pca, columns=[f\"PC{i}\" for i in range(1, test_fmri_pca.shape[1] + 1)])\n\n# Check the shape to ensure consistency\nprint(test_fmri_pca.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:47:15.034279Z","iopub.execute_input":"2025-03-16T22:47:15.034602Z","iopub.status.idle":"2025-03-16T22:47:15.402180Z","shell.execute_reply.started":"2025-03-16T22:47:15.034573Z","shell.execute_reply":"2025-03-16T22:47:15.401337Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_fmri_pca_final = pd.concat([train_fmri.drop(columns=fmri_features), train_fmri_pca], axis=1)\ntest_fmri_pca_final = pd.concat([test_fmri.drop(columns=fmri_features), test_fmri_pca], axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:47:15.402905Z","iopub.execute_input":"2025-03-16T22:47:15.403111Z","iopub.status.idle":"2025-03-16T22:47:15.417388Z","shell.execute_reply.started":"2025-03-16T22:47:15.403082Z","shell.execute_reply":"2025-03-16T22:47:15.416813Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# check if train and test data are aligned\n\nif train_fmri_pca_final.shape[1] == test_fmri_pca_final.shape[1]:\n    print(\"train and test functional mri features are aligned\")\nelse:\n    print(\"Check required!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:47:15.418171Z","iopub.execute_input":"2025-03-16T22:47:15.418438Z","iopub.status.idle":"2025-03-16T22:47:15.422097Z","shell.execute_reply.started":"2025-03-16T22:47:15.418401Z","shell.execute_reply":"2025-03-16T22:47:15.421310Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Concatenate the features","metadata":{}},{"cell_type":"code","source":"train_inter = pd.merge(train_cat_final, train_quant_final, on=\"participant_id\")\nX_train = pd.merge(train_inter, train_fmri_pca_final, on=\"participant_id\")\ny_train = pd.read_excel(\"/kaggle/input/widsdatathon2025/TRAIN/TRAINING_SOLUTIONS.xlsx\")\ntrain = pd.merge(X_train, y_train, on=\"participant_id\")\n\ntest_inter = pd.merge(test_cat_final, test_quant_final, on=\"participant_id\")\ntest = pd.merge(test_inter, test_fmri_pca_final, on=\"participant_id\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:47:15.422847Z","iopub.execute_input":"2025-03-16T22:47:15.423083Z","iopub.status.idle":"2025-03-16T22:47:15.514349Z","shell.execute_reply.started":"2025-03-16T22:47:15.423062Z","shell.execute_reply":"2025-03-16T22:47:15.513763Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(train.shape)\nprint(test.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:47:15.515108Z","iopub.execute_input":"2025-03-16T22:47:15.515333Z","iopub.status.idle":"2025-03-16T22:47:15.519457Z","shell.execute_reply.started":"2025-03-16T22:47:15.515313Z","shell.execute_reply":"2025-03-16T22:47:15.518684Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"y_train.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:47:15.520380Z","iopub.execute_input":"2025-03-16T22:47:15.520691Z","iopub.status.idle":"2025-03-16T22:47:15.527474Z","shell.execute_reply.started":"2025-03-16T22:47:15.520661Z","shell.execute_reply":"2025-03-16T22:47:15.526701Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Models","metadata":{}},{"cell_type":"code","source":"y_train_adhd = y_train[['ADHD_Outcome']]\ny_train_sex = y_train[['Sex_F']]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:47:15.528238Z","iopub.execute_input":"2025-03-16T22:47:15.528484Z","iopub.status.idle":"2025-03-16T22:47:15.532642Z","shell.execute_reply.started":"2025-03-16T22:47:15.528463Z","shell.execute_reply":"2025-03-16T22:47:15.531876Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### ADHD","metadata":{}},{"cell_type":"code","source":"X_train = X_train.drop(columns=\"participant_id\")\nX_train.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:47:15.533428Z","iopub.execute_input":"2025-03-16T22:47:15.533724Z","iopub.status.idle":"2025-03-16T22:47:15.555015Z","shell.execute_reply.started":"2025-03-16T22:47:15.533696Z","shell.execute_reply":"2025-03-16T22:47:15.554384Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# ---------------------XGBoost--------------------------------\n\nFEATURES = X_train.columns\nFOLDS = 5\nkf = KFold(n_splits=FOLDS, shuffle=True, random_state=42)\n    \noof_xgb = np.zeros(len(train))\npred_xgb = np.zeros(len(test))\n\nfor i, (train_index, test_index) in enumerate(kf.split(train)):\n\n    print(\"#\"*25)\n    print(f\"### Fold {i+1}\")\n    print(\"#\"*25)\n    \n    x_train = train.loc[train_index,FEATURES].copy()\n    y_train = train.loc[train_index,\"ADHD_Outcome\"]    \n    x_valid = train.loc[test_index,FEATURES].copy()\n    y_valid = train.loc[test_index,\"ADHD_Outcome\"]\n    x_test = test[FEATURES].copy()\n\n    model = XGBClassifier(\n        device=\"cuda\",\n        max_depth=6,  \n        colsample_bytree=0.9, \n        subsample=0.9, \n        n_estimators=10_000,  \n        learning_rate=0.1, \n        eval_metric=\"auc\",\n        early_stopping_rounds=100,\n        alpha=1,\n    )\n    model.fit(\n        x_train, y_train,\n        eval_set=[(x_valid, y_valid)],  \n        verbose=100 \n    )\n\n    # INFER OOF\n    oof_xgb[test_index] = model.predict_proba(x_valid)[:,1]\n    # INFER TEST\n    pred_xgb += model.predict_proba(x_test)[:,1]\n\n# COMPUTE AVERAGE TEST PREDS\npred_xgb /= FOLDS","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:47:15.555790Z","iopub.execute_input":"2025-03-16T22:47:15.556046Z","iopub.status.idle":"2025-03-16T22:47:35.612462Z","shell.execute_reply.started":"2025-03-16T22:47:15.556024Z","shell.execute_reply":"2025-03-16T22:47:35.611767Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"oof_xgb_adhd_hard = [1 if prob > 0.5 else 0 for prob in oof_xgb]\nprint(f\"XGBoost CV Score F1 = {f1_score(y_train_adhd, oof_xgb_hard):.3f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:47:35.612998Z","iopub.execute_input":"2025-03-16T22:47:35.613224Z","iopub.status.idle":"2025-03-16T22:47:35.625745Z","shell.execute_reply.started":"2025-03-16T22:47:35.613204Z","shell.execute_reply":"2025-03-16T22:47:35.624677Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"pred_xgb_adhd_hard = [int(prob > 0.5) for prob in pred_xgb]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:47:35.626523Z","iopub.execute_input":"2025-03-16T22:47:35.626745Z","iopub.status.idle":"2025-03-16T22:47:35.630263Z","shell.execute_reply.started":"2025-03-16T22:47:35.626726Z","shell.execute_reply":"2025-03-16T22:47:35.629370Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"len(pred_xgb_adhd_hard)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:47:35.631180Z","iopub.execute_input":"2025-03-16T22:47:35.631519Z","iopub.status.idle":"2025-03-16T22:47:35.635906Z","shell.execute_reply.started":"2025-03-16T22:47:35.631469Z","shell.execute_reply":"2025-03-16T22:47:35.635066Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Sex","metadata":{}},{"cell_type":"code","source":"# ---------------------XGBoost--------------------------------\n\nFEATURES = X_train.columns\nFOLDS = 5\nkf = KFold(n_splits=FOLDS, shuffle=True, random_state=42)\n    \noof_xgb = np.zeros(len(train))\npred_xgb = np.zeros(len(test))\n\nfor i, (train_index, test_index) in enumerate(kf.split(train)):\n\n    print(\"#\"*25)\n    print(f\"### Fold {i+1}\")\n    print(\"#\"*25)\n    \n    x_train = train.loc[train_index,FEATURES].copy()\n    y_train = train.loc[train_index,\"Sex_F\"]    \n    x_valid = train.loc[test_index,FEATURES].copy()\n    y_valid = train.loc[test_index,\"Sex_F\"]\n    x_test = test[FEATURES].copy()\n\n    model = XGBClassifier(\n        device=\"cuda\",\n        max_depth=6,  \n        colsample_bytree=0.9, \n        subsample=0.9, \n        n_estimators=10_000,  \n        learning_rate=0.1, \n        eval_metric=\"auc\",\n        early_stopping_rounds=100,\n        alpha=1,\n    )\n    model.fit(\n        x_train, y_train,\n        eval_set=[(x_valid, y_valid)],  \n        verbose=100 \n    )\n\n    # INFER OOF\n    oof_xgb[test_index] = model.predict_proba(x_valid)[:,1]\n    # INFER TEST\n    pred_xgb += model.predict_proba(x_test)[:,1]\n\n# COMPUTE AVERAGE TEST PREDS\npred_xgb /= FOLDS","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:47:35.636621Z","iopub.execute_input":"2025-03-16T22:47:35.636836Z","iopub.status.idle":"2025-03-16T22:48:07.821958Z","shell.execute_reply.started":"2025-03-16T22:47:35.636817Z","shell.execute_reply":"2025-03-16T22:48:07.821293Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"oof_xgb_sex_hard = [1 if prob > 0.5 else 0 for prob in oof_xgb]\nm = f1_score(y_train_sex, oof_xgb_sex_hard)\nprint(f\"XGBoost CV Score F1 = {m:.3f}\")\npred_xgb_sex_hard = [int(prob > 0.5) for prob in pred_xgb]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:48:07.822451Z","iopub.execute_input":"2025-03-16T22:48:07.822674Z","iopub.status.idle":"2025-03-16T22:48:07.834415Z","shell.execute_reply.started":"2025-03-16T22:48:07.822653Z","shell.execute_reply":"2025-03-16T22:48:07.833812Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Submission","metadata":{}},{"cell_type":"code","source":"sample_submission = pd.read_excel(\"/kaggle/input/widsdatathon2025/SAMPLE_SUBMISSION.xlsx\")\nsample_submission.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:48:07.838092Z","iopub.execute_input":"2025-03-16T22:48:07.838304Z","iopub.status.idle":"2025-03-16T22:48:07.869412Z","shell.execute_reply.started":"2025-03-16T22:48:07.838285Z","shell.execute_reply":"2025-03-16T22:48:07.868810Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"submission = pd.concat([\n    test[['participant_id']], \n    pd.DataFrame(pred_xgb_adhd_hard, columns=['ADHD_Outcome']), \n    pd.DataFrame(oof_xgb_sex_hard, columns=['Sex_F'])\n], axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:48:07.870180Z","iopub.execute_input":"2025-03-16T22:48:07.870420Z","iopub.status.idle":"2025-03-16T22:48:07.875999Z","shell.execute_reply.started":"2025-03-16T22:48:07.870398Z","shell.execute_reply":"2025-03-16T22:48:07.875392Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"submission.to_csv(\"submission.csv\", index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-16T22:49:38.968000Z","iopub.execute_input":"2025-03-16T22:49:38.968391Z","iopub.status.idle":"2025-03-16T22:49:38.977708Z","shell.execute_reply.started":"2025-03-16T22:49:38.968354Z","shell.execute_reply":"2025-03-16T22:49:38.977084Z"}},"outputs":[],"execution_count":null}]}